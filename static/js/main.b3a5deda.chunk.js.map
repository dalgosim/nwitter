{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["dotenv","config","firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","REACT_APP_SENDER_ID","appId","_createUserWithEmailAndPassword","email","password","createUserWithEmailAndPassword","authService","then","userCredential","user","console","log","catch","error","code","message","_signInWithEmailAndPassword","signInWithEmailAndPassword","_signInWithPopup","provider","signInWithPopup","result","GithubAuthProvider","credentialFromResult","accessToken","credentialFromError","_updateProfile","profile","a","updateProfile","currentUser","writeDB","collectionName","data","addDoc","collection","dbService","firebaseGoogleProvider","initializeApp","GoogleAuthProvider","firebaseGithubProvider","getAuth","getFirestore","storageService","getStorage","AuthForm","useState","setEmail","setPassword","setError","newAccount","setNewAccount","onChange","event","target","name","value","onSubmit","preventDefault","type","placeholder","required","onClick","prev","Auth","onSocialClick","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","deleteDoc","doc","id","attachmentUrl","deleteObject","ref","toggleEditing","updateDoc","src","width","height","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","uid","uuidv4","uploadString","snapshot","response","getDownloadURL","createdAt","Date","now","creatorId","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","currentTarget","readAsDataURL","Home","nweets","setNweets","useEffect","onSnapshot","docs","newArray","map","document","Profile","refreshUser","navigate","useNavigate","displayName","newDisplayName","setNewDisplayName","signOut","Navigation","to","AppRouter","isLoggedIn","exact","path","element","App","init","setInit","setUserObj","onAuthStateChanged","Boolean","getFullYear","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b3a5deda.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth, updateProfile, signInWithPopup, createUserWithEmailAndPassword, signInWithEmailAndPassword, GoogleAuthProvider, GithubAuthProvider } from \"firebase/auth\";\nimport { getFirestore, collection, addDoc, getDocs } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID\n};\n\nexport const _createUserWithEmailAndPassword = (email, password) => {\n    createUserWithEmailAndPassword(authService, email, password)\n        .then((userCredential) => {\n            // Signed in\n            const user = userCredential.user;\n            console.log(\"user : \", userCredential);\n        })\n        .catch((error) => {\n            const errorCode = error.code;\n            const errorMessage = error.message;\n            console.log(\"error : \", error);\n            // ..\n        });\n}\n\nexport const _signInWithEmailAndPassword = (email, password) => {\n    signInWithEmailAndPassword(authService, email, password)\n        .then((userCredential) => {\n            // Signed in\n            const user = userCredential.user;\n            console.log(\"user : \", userCredential);\n        })\n        .catch((error) => {\n            const errorCode = error.code;\n            const errorMessage = error.message;\n            console.log(\"error : \", error);\n        });\n}\n\nexport const _signInWithPopup = (provider) => {\n    signInWithPopup(authService, provider)\n    .then((result) => {\n        // This gives you a GitHub Access Token. You can use it to access the GitHub API.\n        const credential = GithubAuthProvider.credentialFromResult(result);\n        const token = credential.accessToken;\n\n        // The signed-in user info.\n        const user = result.user;\n        // ...\n    }).catch((error) => {\n        // Handle Errors here.\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        // The email of the user's account used.\n        const email = error.email;\n        // The AuthCredential type that was used.\n        const credential = GithubAuthProvider.credentialFromError(error);\n        // ...\n    });\n}\n\nexport const _updateProfile = async (profile) => {\n    await updateProfile(authService.currentUser, profile).then(() => {\n        // Profile updated!\n        // ...\n    }).catch((error) => {\n        // An error occurred\n        // ...\n    });\n}\n\nexport const writeDB = async (collectionName, data) => {\n    try {\n        const docRef = await addDoc(collection(dbService, collectionName), data);\n    } catch (e) {\n        console.error(\"Error adding document: \", e);\n    }\n}\n\nexport const readDB = async (collectionName) => {\n    try {\n        const querySnapshot = await getDocs(collection(dbService, collectionName));\n        return querySnapshot;\n    } catch (e) {\n        console.error(\"Error reading  document: \", e);\n    }\n}\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\nexport const firebaseGoogleProvider = GoogleAuthProvider;\nexport const firebaseGithubProvider = GithubAuthProvider;\nexport const authService = getAuth();\nexport const dbService = getFirestore();\nexport const storageService = getStorage();","import { authService, firebaseGoogleProvider, firebaseGithubProvider, _signInWithPopup, _createUserWithEmailAndPassword, _signInWithEmailAndPassword } from \"fbase\";\nimport { useState } from \"react\";\n\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n\n    const onChange = (event) => {\n        // console.log(event.target.name);\n        const {\n            target: {name, value},\n        } = event;\n        if (name === \"email\") {\n            setEmail(value);\n        } else if (name === \"password\") {\n            setPassword(value);\n        }\n    }\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        try {\n            let data;\n            if (newAccount) {\n                // create newAccount\n                data = await _createUserWithEmailAndPassword(email, password);\n            } else {\n                // login\n                data = await _signInWithEmailAndPassword(email, password);\n            }\n        } catch (error) {\n            setError(error.message);\n        }\n    }\n\n    const toggleAccount = () => setNewAccount((prev) => !prev);\n\n    return (\n        <>\n            <form onSubmit={onSubmit}>\n                <input name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange={onChange} />\n                <input name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange} />\n                <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\n                {error}\n            </form>\n            <span onClick={toggleAccount}>\n                {newAccount ? \"Sign In\" : \"Create Account\"}\n            </span>\n        </>\n    );\n}\n\nexport default AuthForm;","import AuthForm from \"components/AuthForm\";\nimport { authService, firebaseGoogleProvider, firebaseGithubProvider, _signInWithPopup, _createUserWithEmailAndPassword, _signInWithEmailAndPassword } from \"fbase\";\nimport { useState } from \"react\";\n\nconst Auth = () => {\n\n    const onSocialClick = async (event) => {\n        const {\n            target: {name},\n        } = event;\n        let provider;\n        if (name === \"google\") {\n            provider = new firebaseGoogleProvider();\n        } else if (name === \"github\") {\n            provider = new firebaseGithubProvider();\n        }\n        const data = await _signInWithPopup(provider);\n    }\n\n    return (\n        <div>\n            <AuthForm />\n            <div>\n                <button onClick={onSocialClick} name=\"google\">Continue with Google</button>\n                <button onClick={onSocialClick} name=\"github\">Continue with Github</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Auth;","import { dbService, storageService, writeDB } from \"fbase\";\nimport { doc, deleteDoc, updateDoc } from \"firebase/firestore\";\nimport { ref, deleteObject } from \"firebase/storage\";\nimport { useState } from \"react\";\n\nconst Nweet = ({nweetObj, isOwner}) => {\n    const [editing, setEditing] = useState(false);\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\n\n    const onDeleteClick = async () => {\n        const ok = window.confirm(\"삭제하시겠습니까?\");\n\n        if (ok) {\n            await deleteDoc(doc(dbService, \"nweet\", nweetObj.id));\n            if (nweetObj.attachmentUrl!=\"\") {\n                deleteObject(ref(storageService, nweetObj.attachmentUrl)).then(() => {\n                    // File deleted successfully\n                    console.log(\"File deleted successfully\");\n                }).catch((error) => {\n                    // Uh-oh, an error occurred!\n                    console.log(\"Uh-oh, an error occurred!\");\n                });\n            }\n        }\n    }\n\n    const toggleEditing = () => setEditing((prev) => !prev);\n\n    const onChange = (event) => {\n        const {\n            target: { value },\n        } = event;\n        setNewNweet(value);\n    };\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        await updateDoc(doc(dbService, \"nweet\", nweetObj.id), {text: newNweet});\n        setEditing(false);\n    };\n\n    return (\n        <div>\n            {editing ? (\n                <>\n                    <form onSubmit={onSubmit}>\n                        <input onChange={onChange} value={newNweet} required />\n                        <input type=\"submit\" value=\"Update Nweet\" />\n                    </form>\n                    <button onClick={toggleEditing}>Cancel</button>\n                </>\n            ) : (\n                <>\n                <h4>{nweetObj.text}</h4>\n                {nweetObj.attachmentUrl && (\n                    <img src={nweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\n                )}\n                {isOwner && (\n                    <>\n                        <button onClick={onDeleteClick}>Delete Nweet</button>\n                        <button onClick={toggleEditing}>Edit Nweet</button>\n                    </>\n                )}\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default Nweet;","import { writeDB, readDB, dbService, storageService } from \"fbase\";\nimport { ref, uploadString, getDownloadURL } from \"firebase/storage\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { useState } from \"react\";\n\n\n\nconst NweetFactory = ({userObj}) => {\n    const [nweet, setNweet] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\");\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        let attachmentUrl = \"\";\n        if (attachment!=\"\") {\n            const attachmentRef = ref(storageService, `${userObj.uid}/${uuidv4()}`);\n            const response = await uploadString(attachmentRef, attachment, 'data_url').then((snapshot) => {\n                console.log('Uploaded a data_url string!');\n                console.log(snapshot);\n                return snapshot;\n            });\n            attachmentUrl = await getDownloadURL(response.ref);\n        }\n        await writeDB(\"nweet\", {\n            text: nweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl,\n        });\n        setNweet(\"\");\n        setAttachment(\"\");\n    };\n\n    const onChange = (event) => {\n        event.preventDefault();\n        const {\n            target: { value },\n        } = event;\n        setNweet(value);\n    };\n\n    const onFileChange = (event) => {\n        const {\n            target: {files},\n        } = event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            const {\n                currentTarget: {result},\n            } = finishedEvent;\n            setAttachment(result);\n        }\n        reader.readAsDataURL(theFile);\n    };\n\n    const onClearAttachment = () => {\n        setAttachment(\"\");\n    };\n\n    return (\n        <form onSubmit={onSubmit}>\n            <input value={nweet} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" maxLength={120}/>\n            <input type=\"file\" accept=\"image/*\" onChange={onFileChange}/>\n            <input type=\"submit\" value=\"Nweet\" />\n            { attachment && (\n                <div>\n                    <img src={attachment} width=\"50px\" height=\"50px\" /> \n                    <button onClick={onClearAttachment}>Clear</button>\n                </div>\n            )}\n        </form>\n    );\n};\n\nexport default NweetFactory;","import { dbService } from \"fbase\";\nimport { collection, onSnapshot } from \"firebase/firestore\";\nimport { useEffect, useState } from \"react\";\nimport Nweet from \"components/Nweet\";\nimport NweetFactory from \"components/NweetFactory\";\n\n\nconst Home = ({userObj}) => {\n    const [nweets, setNweets] = useState([]);\n\n    // const getNweets = async () => {\n    //     const dbNweets = await readDB(\"nweet\");\n    //     dbNweets.forEach((doc) => {\n    //         const nweetObject = { ...doc.data(), id: doc.id }\n    //         setNweets((prev) => [nweetObject, ...prev]);\n    //     });\n    // };\n\n    useEffect(() => {\n        // getNweets();\n        const unsub = onSnapshot(collection(dbService, \"nweet\"), (snapshot) => {\n            console.log(snapshot.docs);\n            const newArray = snapshot.docs.map((document) => ({\n                id: document.id,\n                ...document.data(),\n            }));\n            setNweets(newArray);\n        });        \n    }, []);\n\n    return (\n        <>\n            <NweetFactory userObj={userObj}/>\n            <div>\n                {nweets.map((nweet) => (\n                    <Nweet key={nweet.id} nweetObj={nweet} isOwner={nweet.creatorId === userObj.uid} />\n                ))}\n            </div>\n        </>\n    );\n}\n\nexport default Home;","import { authService, dbService, _updateProfile } from \"fbase\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { getDocs, collection, query, where, orderBy } from \"firebase/firestore\";\n\nconst Profile = ({userObj, refreshUser}) => {\n    const navigate = useNavigate();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n    const onLogOutClick = () => {\n        authService.signOut();\n        navigate(\"/\");\n    };\n\n    const onChange = (event) => {\n        const {\n            target: {value},\n        } = event;\n        setNewDisplayName(value);\n    }\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if (userObj.displayName !== newDisplayName) {\n            await _updateProfile({displayName: newDisplayName});\n            refreshUser();\n        }\n    }\n\n    // const getMyNeets = async () => {\n    //     const nweetRef = collection(dbService, \"nweet\");\n    //     const q = query(nweetRef,\n    //         where(\"creatorId\", \"==\", userObj.uid),\n    //         orderBy(\"createdAt\", \"asc\")\n    //     );\n    //     const querySnapshot = await getDocs(q);\n\n    //     console.log(querySnapshot.docs.map((doc) => doc.data()));\n    // }\n\n    useEffect(() => {\n        // getMyNeets();\n    }, []);\n    \n    return (\n        <>\n            <form onSubmit={onSubmit}>\n                <input type=\"text\" placeholder=\"Display name\" onChange={onChange} value={newDisplayName} />\n                <input type=\"submit\" placeholder=\"Update Profile\"/>\n            </form>\n            <button onClick={onLogOutClick}>Log Out</button>\n        </>\n    );\n};\n\nexport default Profile;","import { Link } from \"react-router-dom\";\n\nconst Navigation = ({userObj}) => {\n    return (\n        <nav>\n            <ul>\n                <li><Link to=\"/\">Home</Link></li>\n                <li><Link to=\"/profile\">{userObj.displayName}의 Profile</Link></li>\n            </ul>\n        </nav>\n    );\n}\n\nexport default Navigation;","import { useState } from \"react\";\nimport { HashRouter as Router, Route, Routes } from \"react-router-dom\"; //Switch -> Routes (v6.0.2)\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\n\nconst AppRouter = ({isLoggedIn, userObj, refreshUser}) => {\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj}/>}\n            <Routes>\n                {isLoggedIn ? (\n                    <>\n                        <Route exact path=\"/\" element={<Home userObj={userObj}/>} />\n                        <Route exact path=\"/profile\" element={<Profile userObj={userObj} refreshUser={refreshUser}/>} />\n                    </>\n                ) : (\n                    <Route exact path=\"/\" element={<Auth/>} />\n                )}\n            </Routes>\n        </Router>\n    );\n}\n\nexport default AppRouter;","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  // const [isLoggedIn, setIsLoggedIn] = useState(authService.currentUser);\n  const [userObj, setUserObj] = useState(null);\n\n  const refreshUser = () => {\n    // setUserObj(authService.currentUser);\n    const user = authService.currentUser;\n    setUserObj({\n      uid: user.uid,\n      displayName: user.displayName\n    });\n  }\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        // setIsLoggedIn(user);\n        setUserObj({\n          uid: user.uid,\n          displayName: user.displayName\n        });\n      } else {\n        setUserObj(false);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  return (\n    <>\n      {init ? (<AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj}/>) : (\"initializing..\")}\n      <footer>&copy; {new Date().getFullYear()} Nwitter</footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}